/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
__webpack_require__(2);
__webpack_require__(3);
__webpack_require__(4);
__webpack_require__(5);
__webpack_require__(6);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

function taskController(rootElement) {

    taskView(rootElement, tasks, {
        onDone,
        onDelete,
        onMove
    });

    taskAddFormView(rootElement, {
        onSubmit
    });

    function onDone(task, status) {
        tasks.done(task, status);
    }

    function onDelete(task) {
        tasks.delete(task);
    }

    function onSubmit(text) {
        tasks.add(text);
    }

    function onMove(task) {
        tasks.move(task);
    }
}

/***/ }),
/* 2 */
/***/ (function(module, exports) {

function TaskModel(tasks) {
    let allTasks = JSON.parse(localStorage.getItem('allTasks'));
    this.listeners = [];
    tasks = allTasks || tasks;
    tasks.forEach(task => {
        this.push(task);
    });
}

function addToLocalStorage() {
    let all = [];
    for (let i = 0; i < tasks.length; i++) {
        all.push(tasks[i]);
    }
    localStorage.setItem('allTasks', JSON.stringify(all));
}

TaskModel.prototype = Object.create(Array.prototype);

TaskModel.prototype.done = function (task, status) {
    task.done = status;
    addToLocalStorage(tasks);
    this.trigger('done', [task]);
};

TaskModel.prototype.add = function (text) {
    let task = {
        text,
        done: false,
        date: new Date().toLocaleString('en-US', options)
    };
    this.push(task);
    addToLocalStorage(tasks);
    this.trigger('add', [task]);
};

TaskModel.prototype.delete = function (task) {
    let index = this.indexOf(task);
    if (index >= 0) {
        this.splice(index, 1);
    }
    localStorage.setItem('arrTasks', JSON.stringify(tasks));
    addToLocalStorage(tasks);
    this.trigger('delete', [task]);
};

TaskModel.prototype.move = function (task) {
    let index = tasks.indexOf(task);
    if (event.target.innerHTML === 'Up') {
        if (index !== 0) {
            let up = tasks[index - 1];
            tasks[index - 1] = task;
            tasks[index] = up;
        }
    } else {
        if (index !== tasks.length - 1) {
            let down = tasks[index + 1];
            tasks[index + 1] = task;
            tasks[index] = down;
        }
    }
    addToLocalStorage(tasks);
    this.trigger('move', [task]);
};

TaskModel.prototype.on = function (event, callback) {
    this.listeners.push({
        event,
        callback
    });
};

TaskModel.prototype.trigger = function (event, args) {
    let tasks = this;

    this.listeners.forEach(listener => {
        if (listener.event === event) {
            listener.callback.apply(tasks, args);
        }
    });
};

let options = {
    month: 'numeric',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric'
};




/***/ }),
/* 3 */
/***/ (function(module, exports) {

let tasks = new TaskModel([
    {
        text: 'Brew coffee',
        done: false,
        date: new Date().toLocaleString('en-US', options)
    }
]);


/***/ }),
/* 4 */
/***/ (function(module, exports) {

function taskView(rootElement, tasks, actions) {
    let ul = document.createElement('ul');

    let template = document.createElement('li');
    template.innerHTML = `
        <input type="checkbox" class="done">
        <span class="date"></span>
        <span class="text"></span>
        <button class="delete">Delete</button>
        <button class="up">Up</button>
        <button class="down">Down</button>
    `;

    tasks.forEach(function(task) {
        add(task);
    });

    tasks.on('done', function (task) {
        [].forEach.call(ul.childNodes, function (li) {
            if (li.task === task) {
                li.querySelector('.text').style.textDecoration = task.done ? 'line-through' : '';
            }
        });
    });

    tasks.on('add', function (task) {
        add(task);
    });

    tasks.on('delete', function (task) {
        [].forEach.call(ul.childNodes, function (li) {
            if (li.task === task) {
                li.remove();
            }
        });
    });

    tasks.on('move', function () {
        let liS = document.querySelectorAll('li');
        for (let i = 0; i < liS.length; i++) {
            ul.removeChild(liS[i]);
        }
        tasks.forEach(function(task) {
            add(task);
        });
    });


    rootElement.appendChild(ul);

    function add(task) {
        let li = template.cloneNode(true);
        li.task = task;

        let date = li.querySelector('.date');
        date.innerText = task.date;

        let text = li.querySelector('.text');
        text.innerHTML = task.text;
        text.style.textDecoration = task.done ? 'line-through' : '';

        let checkbox = li.querySelector('.done');
        checkbox.checked = task.done ? 'checked' : '';
        checkbox.addEventListener('change', function (event) {
            actions.onDone(task, event.target.checked);
        });

        li.querySelector('.delete').addEventListener('click', function (event) {
            actions.onDelete(task);
        });

        li.querySelector('.up').addEventListener('click', function (event) {
            actions.onMove(task);
        });

        li.querySelector('.down').addEventListener('click', function (event) {
            actions.onMove(task);
        });

        ul.appendChild(li);
    }
}

/***/ }),
/* 5 */
/***/ (function(module, exports) {

function taskAddFormView(rootElement, actions) {
    let form = document.createElement('form');
    form.innerHTML = `
        <input type="text" name="text">
        <input type="submit" value="Add">
    `;

    form.addEventListener('submit', function (event) {
        let input = form.querySelector('[name=text]');
        let text = input.value.trim();

        if (text) {
            actions.onSubmit(text);
            input.value = '';
        }
        event.preventDefault();
    });

    rootElement.appendChild(form);
}

/***/ }),
/* 6 */
/***/ (function(module, exports) {

window.addEventListener('load', function () {
    taskController(document.getElementById('todo-list'));
});


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,